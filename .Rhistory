library(swirl)
swril()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_list)
class(cls_ve)
class(cls_vect)
View(flags)
play()
?`$`
nxt()
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$anmiate)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
info()
skip()
swirl
swirl()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plant)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(0:1, 100, prob = c(0.3, 0.7))
sample(c(0, 1), 100, prob = c(0.3, 0.7))
sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom()
flips2 <- rbinom(1, size = 1, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, n = 100, size = 1, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(100, mean = 100, sd = 25)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
# get the complete table
complete_table <- complete("specdata", 1:332)
nobs <- complete_table$nobs
# find the valid ids
ids <- complete_table$id[nobs > threshold]
# get the length of ids vector
id_len <- length(ids)
corr_vector <- rep(0, id_len)
# find all files in the specdata folder
all_files <- as.character( list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
j <- 1
for(i in ids) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
corr_vector[j] <- cor(current_file$sulfate, current_file$nitrate, use="complete.obs")
j <- j + 1
}
result <- corr_vector
return(result)
}
cr <- corr("specdata", 150)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
# set the working directory to where the csv files are stored
oldwd <- getwd()
setwd(directory)
# loading up the csv files as specified by the argument id
filenames <- paste(sprintf("%03d",id), ".csv", sep = "")
data <- lapply(filenames, read.csv)
totaldata <- do.call("rbind", data)
#
testfunction <- function(a, b) {
filtereddata <- totaldata
}
summary
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
correlations <- numeric(0)
files <- list.files(directory)
for(filename in files) {
classes <- c('Date', 'numeric', 'numeric', 'integer')
monitor <- read.csv(paste0(directory, '/', filename),
colClasses=classes)
if(sum(complete.cases(monitor)) > threshold){
correlation <- cor(monitor[['sulfate']], monitor[['nitrate']],
use='complete.obs')
correlations <- c(correlations, correlation)
}
}
correlations
}
cr <- corr("specdata", 150)
head(cr)
heard(cr)
cr <- corr("C:\Users\895284\Desktop\specdata", 150)
cr <- corr("C:/Users/895284/Desktop/specdata", 150)
head(cr)
?numeric
test <- numeric(0)
test
test
?read.csv
?paste0
?for
188 +382.5
8+156+32+80+302.5+14+7+400
10248/9339
5453 / 4581 -1
76878 / 70162 - 1
92214 / 89358
238000 / 9821000000
x <- 238000 / 9821000000
y <- 30150000 / 1475948000000
x / y
=3742 * y
3742 * y
3742 * y * 1000
3742 * y * 100000
3742 * y * 10000000
1500 * y * 10000000
1500 * y * 10000000 + (2242 * x * 10000000)
# Setting the working directory
setwd("~/Documents/GitHub/coursera-datascience-statistical-inference-project")
# Loading up the Tooth Growth dataset
ToothGrowth <- ToothGrowth
setwd("~/GitHub/coursera-datascience-statistical-inference-project")
ToothGrowth <- ToothGrowth
?ToothGrowth
?frequency
library (ggplot2)
ggplot(data = ToothGrowth, aes(x = as.factor(dose), y = len, fill = supp)) +
geom_bar(stat = "identity",) +
facet_grid(. ~ supp) +
xlab("Dosage (in mg)") +
ylab("Length of Tooth") +
guides(fill = guide_legend(title = "Supplement Type"))
