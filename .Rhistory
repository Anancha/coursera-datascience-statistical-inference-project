final_test <- ddply(final[3:7], .final$key_issues, colSums)
aggdata <- aggregate(final, by=list(key_issues), FUN = sum, na.rm=TRUE)
aggdata <- aggregate(final[3:7], by=list(key_issues), FUN = sum, na.rm=TRUE)
str(final)
keywordcount_conservatives <- as.numeric(str_count(tolower(conservatives), issues))
keywordcount_labour <- as.numeric(str_count(tolower(labour), issues))
keywordcount_libdem <- as.numeric(str_count(tolower(libdem), issues))
keywordcount_greenparty <- as.numeric(str_count(tolower(greenparty), issues))
keywordcount_ukip <- as.numeric(str_count(tolower(ukip), issues))
library(stringr)
keywordcount_conservatives <- as.numeric(str_count(tolower(conservatives), issues))
keywordcount_labour <- as.numeric(str_count(tolower(labour), issues))
keywordcount_libdem <- as.numeric(str_count(tolower(libdem), issues))
keywordcount_greenparty <- as.numeric(str_count(tolower(greenparty), issues))
keywordcount_ukip <- as.numeric(str_count(tolower(ukip), issues))
keywords <- c(health, education, inequality, spending, taxes, crime, jobs, economy, deficit, housing, immigration, europe)
final <- as.data.table(cbind(key_issues, keywords, keywordcount_conservatives, keywordcount_labour, keywordcount_libdem, keywordcount_greenparty, keywordcount_ukip))
library(data.table)
final <- as.data.table(cbind(key_issues, keywords, keywordcount_conservatives, keywordcount_labour, keywordcount_libdem, keywordcount_greenparty, keywordcount_ukip))
str(final)
final <- as.data.table(cbind(key_issues, keywords, as.numeric(keywordcount_conservatives), keywordcount_labour, keywordcount_libdem, keywordcount_greenparty, keywordcount_ukip))
str(final)
final <- as.data.table(cbind(key_issues, keywords, keywordcount_conservatives, keywordcount_labour, keywordcount_libdem, keywordcount_greenparty, keywordcount_ukip))
str(final)
key_issues <- c(rep("Health", length(health)), rep("Education", length(education)), rep("Inequality", length(inequality)), rep("Spending", length(spending)), rep("Taxes", length(taxes)), rep("Crime", length(crime)), rep("Jobs", length(jobs)), rep("Economy", length(economy)), rep("Deficit", length(deficit)), rep("Housing", length(housing)), rep("Immigration", length(immigration)), rep("Europe", length(europe)))
# Combine into one final table
final <- as.data.table(cbind(key_issues, keywords, keywordcount_conservatives, keywordcount_labour, keywordcount_libdem, keywordcount_greenparty, keywordcount_ukip))
str(final)
class(keywordcount_conservatives)
final <- cbind(key_issues, keywords, keywordcount_conservatives, keywordcount_labour, keywordcount_libdem, keywordcount_greenparty, keywordcount_ukip)
str(final)
View(final)
str(final)
final <- cbind(key_issues, keywords, keywordcount_conservatives, keywordcount_labour, keywordcount_libdem, keywordcount_greenparty, keywordcount_ukip)
class(final)
class(final$keywordcount_conservatives)
str(final$keywordcount_conservatives)
View(final)
#  Exploring text analysis by analysing manifestos of key political parties in the 2015 UK General Elections
# Analysis Set Up ---------------------------------------------------------
# Set working directory
setwd("~/Documents/GitHub/uk-general-election-2015-manifesto-analysis")
# Load relevant libraries
library(stringr)
library(data.table)
library(plyr)
# Convert PDF files to TXT files (requires XPDF to be installed - see README.md for more details
dest <- "~/Documents/GitHub/uk-general-election-2015-manifesto-analysis/Manifestos"
myfiles <- list.files(path = dest, pattern = "pdf",  full.names = TRUE)
lapply(myfiles, function(i) system(paste('"/Users/dannychan0510/Documents/GitHub/uk-general-election-2015-manifesto-analysis/xpdfbin-mac-3.04/bin64/pdftotext"', paste0('"', i, '"')), wait = FALSE))
# Set file paths of the manifestos
conservatives <- 'Manifestos/Conservatives Manifesto 2015.txt'
labour <- 'Manifestos/Labour Manifesto 2015.txt'
libdem <- 'Manifestos/Lib Dem Manifesto 2015.txt'
greenparty <- 'Manifestos/Green Party Manifesto 2015.txt'
ukip <- 'Manifestos/UKIP Manifesto 2015.txt'
# Reading in manifesto text
conservatives <- readChar(conservatives, file.info(conservatives)$size, useBytes = TRUE)
labour <- readChar(labour, file.info(labour)$size, useBytes = TRUE)
libdem <- readChar(libdem, file.info(libdem)$size, useBytes = TRUE)
greenparty <- readChar(greenparty, file.info(greenparty)$size, useBytes = TRUE)
ukip <- readChar(ukip, file.info(ukip)$size, useBytes = TRUE)
# Convert text to UTF8 form
conservatives <- iconv(enc2utf8(conservatives), sub="byte")
labour <- iconv(enc2utf8(labour), sub="byte")
libdem <- iconv(enc2utf8(libdem), sub="byte")
greenparty <- iconv(enc2utf8(greenparty), sub="byte")
ukip <- iconv(enc2utf8(ukip), sub="byte")
# Remove unnecessary objects
rm(dest, myfiles)
# Count analysis of key words ---------------------------------------------
# Generate list of words to count (taken from )
health <- c("\\<health\\>", "\\<nhs\\>", "\\<doctors\\>", "\\<nurses\\>", "\\<gps\\>")
education <- c("\\<education\\>", "\\<schools\\>", "\\<universities\\>")
inequality <- c("\\<inequality\\>", "\\<poverty\\>", "\\<wage\\>", "\\<pay\\>")
spending <- c("\\<spend\\>", "\\<spends\\>", "\\<spending\\>", "\\<investment\\>", "\\<invested\\>", "\\<investing\\>", "\\<invest\\>")
taxes <- c("\\<tax\\>", "\\<taxpayers\\>", "\\<taxes\\>", "\\<vat\\>")
crime <- c("\\<crime\\>", "\\<crimes\\>", "\\<police\\>", "\\<policing\\>", "\\<prisons\\>")
jobs <- c("\\<jobs\\>", "\\<unemployment\\>", "\\<employment\\>", "\\<workers\\>")
economy <- c("\\<economy\\>")
deficit <- c("\\<deficit\\>", "\\<debt\\>", "\\<borrowing\\>", "\\<cuts\\>")
housing <- c("\\<housing\\>", "\\<buyers\\>", "\\<rent\\>", "\\<renters\\>", "\\<property\\>", "\\<house\\>", "\\<housebuilding\\>")
immigration <- c("\\<immigration\\>", "\\<immigrants\\>", "\\<migration\\>", "\\<migrants\\>")
europe <- c("\\<europe\\>", "\\<european\\>", "\\<eu\\>", "\\<foreign\\>")
issues <- c(health, education, inequality, spending, taxes, crime, jobs, economy, deficit, housing, immigration, europe)
# Get word count for keywords for key political parties
keywordcount_conservatives <- as.numeric(str_count(tolower(conservatives), issues))
keywordcount_labour <- as.numeric(str_count(tolower(labour), issues))
keywordcount_libdem <- as.numeric(str_count(tolower(libdem), issues))
keywordcount_greenparty <- as.numeric(str_count(tolower(greenparty), issues))
keywordcount_ukip <- as.numeric(str_count(tolower(ukip), issues))
# Get list of keywords
keywords <- c(health, education, inequality, spending, taxes, crime, jobs, economy, deficit, housing, immigration, europe)
# Generate issues column
key_issues <- c(rep("Health", length(health)), rep("Education", length(education)), rep("Inequality", length(inequality)), rep("Spending", length(spending)), rep("Taxes", length(taxes)), rep("Crime", length(crime)), rep("Jobs", length(jobs)), rep("Economy", length(economy)), rep("Deficit", length(deficit)), rep("Housing", length(housing)), rep("Immigration", length(immigration)), rep("Europe", length(europe)))
# Combine into one final table
final <- cbind(key_issues, keywords, keywordcount_conservatives, keywordcount_labour, keywordcount_libdem, keywordcount_greenparty, keywordcount_ukip)
View(final)
final <- data.frame(key_issues, keywords, keywordcount_conservatives, keywordcount_labour, keywordcount_libdem, keywordcount_greenparty, keywordcount_ukip)
str(final)
aggdata <- aggregate(final[3:7], by=list(key_issues), FUN = sum)
aggdata <- aggregate(final, by=list(key_issues), FUN = sum)
aggdata <- aggregate(final[3:7], by=list(key_issues), FUN = sum)
View(aggdata)
sum(str_count(tolower(conservatives), jobs))
sum(str_count(tolower(labour), jobs))
sum(str_count(tolower(libdem), health))
final <- aggregate(final[3:7], by=list(key_issues), FUN = sum)
rm(list = setdiff(ls(), "final"))
View(final)
View(final)
names(final) <- c("Issues", "Conservatives", "Labour", "Liberal Democrats", "Green Party", "UKIP")
View(final)
write.csv(final, "keyword_count.csv")
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40)))
hist(mns)
rexp(40)
rexp(40)
rexp(40)
rexp(40)
rexp(40)
rexp(40)
set.seed(1)
rexp(40)
set.seed(1)
rexp(40)
set.seed(2)
rexp(40)
rexp(40)
set.seed(2)
rexp(40)
rexp(40)
setwd("~/Documents/GitHub/coursera-datascience-statistical-inference-project")
set.seed(510)
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 1/0.2)))
hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 1/0.2)))
hist(mns)
set.seed(510)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 1/0.2)))
hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 1/0.2)))
hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 1/0.2)))
hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 1/0.2)))
hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 1/0.2)))
hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 1/0.2)))
hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 1/0.2)))
hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 1/0.2)))
hist(mns)
set.seed(510)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 1/0.2)))
hist(mns)
set.seed(510)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 1/0.2)))
hist(mns)
?var
set.seed(510)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
set.seed(510)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 1/0.2)))
hist(mns)
set.seed(510)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
set.seed(510)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 1/0.2)))
hist(mns)
set.seed(100)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 1/0.2)))
hist(mns)
set.seed(100)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
set.seed(100)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
set.seed(100)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
set.seed(100)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
set.seed(234)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
set.seed(204)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
set.seed(510)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 1/0.2)))
hist(mns)
set.seed(510)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
set.seed(23)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 1/0.2)))
hist(vrc)
set.seed(23)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 1/0.2)))
hist(mns)
hist(vrc, breaks - 30)
hist(vrc, breaks = 30)
hist(vrc, breaks = 50)
var(vrc)
std(vrc)
ds(vrc)
sd(vrc)
?sd
set.seed(567)
simdata <- t(replicate(nsim, rexp(nvals, lambda)))
df <- data.frame(Mean=c(mean(rowMeans(simdata)), 1/lambda),
Variance=c(mean(apply(simdata, 1, var)), 1/lambda^2))
rownames(df) <- c("Simulated", "Theoretical")
pander(df, round=2)
pander(df, round=2)
library(pander)
nsim <- 1000
nvals <- 40
lambda <- 0.2
set.seed(567)
simdata <- t(replicate(nsim, rexp(nvals, lambda)))
df <- data.frame(Mean=c(mean(rowMeans(simdata)), 1/lambda),
Variance=c(mean(apply(simdata, 1, var)), 1/lambda^2))
rownames(df) <- c("Simulated", "Theoretical")
pander(df, round=2)
var(simdata)
set.seed(23)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 1/0.2)))
hist(mns)
var(mns)
mean(vrc)
sqrt(mean(vrc))
.199^.5
.199^4
sqrt(mean(vrc))
.199^2
set.seed(23)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 1/0.2)))
hist(mns)
mean(mns)
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 0.2)))
set.seed(23)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 0.2)))
hist(mns)
mean(mns)
set.seed(23)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 0.2)))
hist(vrc, breaks = 50)
mean()
set.seed(23)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 0.2)))
hist(vrc, breaks = 50)
mean(vrc)
set.seed(23)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 0.2)))
hist(vrc, breaks = 50)
hist(vrc)
set.seed(23)
vrc = NULL
for (i in 1 : 1000) vrc = c(vrc, var(rexp(40, 0.2)))
hist(vrc)
vrc(mns)
sd(mns)
set.seed(23)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 0.2)))
hist(mns)
lamda <- 0.2
set.seed(23)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, lamda)))
hist(mns)
set.seed(23)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, lamda)))
hist(mns)
lamda <- 0.2
set.seed(23)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, lamda)))
hist(mns)
var(mns)
set.seed(100)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, lamda)))
hist(mns)
var(mns)
mean(mns)
var(mns)
sd(mns)
var(mns)
ggplot(mns) + geom_histogram()
library(ggplot2)
ggplot(mns) + geom_histogram()
ggplot(as.data.frame(mns)) + geom_histogram()
ggplot(mns, aes(mns)) + geom_histogram()
mns <- as.data.frame(mns)
ggplot(mns, aes(mns)) + geom_histogram()
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .5)
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .5, colour = "white")
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .5, colour = "white", fill = "salmon")
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .5, colour = "white", fill = "salmon", alpha = 0,2)
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .5, colour = "white", fill = "salmon", alpha = 0.2)
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .5, colour = "white", fill = "salmon", alpha = 0.8)
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .5, colour = "white", fill = "salmon", alpha = 05)
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .5, colour = "white", fill = "salmon", alpha = 0.5)
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .5, colour = "white", fill = "salmon")
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .5, colour = "white", fill = "tomato1")
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .5, colour = "white", fill = "alteblue")
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .5, colour = "white", fill = "slateblue")
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .5, colour = "white", fill = "skyblue1")
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .5, colour = "white", fill = "skyblue4")
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .5, colour = "white", fill = "skyblue4") + labs("Frequency")
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .5, colour = "white", fill = "skyblue4") + labs(y = "Frequency")
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .5, colour = "white", fill = "skyblue4") + labs(y = "Frequency", x = "Mean")
ggplot(mns, aes(mns)) + geom_histogram(binwidth = 1, colour = "white", fill = "skyblue4") + labs(y = "Frequency", x = "Mean")
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .2, colour = "white", fill = "skyblue4") + labs(y = "Frequency", x = "Mean")
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .4, colour = "white", fill = "skyblue4") + labs(y = "Frequency", x = "Mean")
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .6, colour = "white", fill = "skyblue4") + labs(y = "Frequency", x = "Mean")
# Setting the value of lambda
lambda <- 0.2
# Obtaining the distribution of the averages of 40 exponentials
set.seed(100)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, lambda)))
# Plotting out a histogram of the distribution
library(ggplot2)
mns <- as.data.frame(mns)
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .6, colour = "white", fill = "skyblue4") + labs(y = "Frequency", x = "Mean")
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .6, colour = "white", fill = "skyblue4") + labs(y = "Frequency", x = "Mean") + geom_vline(xintercept = 1 / lambda)
# Obtaining the distribution of the averages of 40 exponentials
set.seed(23)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, lambda)))
# Plotting out a histogram of the distribution
library(ggplot2)
mns <- as.data.frame(mns)
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .6, colour = "white", fill = "skyblue4") + labs(y = "Frequency", x = "Mean") + geom_vline(xintercept = 1 / lambda)
# Obtaining the distribution of the averages of 40 exponentials
set.seed(123)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, lambda)))
# Plotting out a histogram of the distribution
library(ggplot2)
mns <- as.data.frame(mns)
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .6, colour = "white", fill = "skyblue4") + labs(y = "Frequency", x = "Mean") + geom_vline(xintercept = 1 / lambda)
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .5, colour = "white", fill = "skyblue4") + labs(y = "Frequency", x = "Mean") + geom_vline(xintercept = 1 / lambda)
ggplot(mns, aes(mns)) + geom_histogram(binwidth = .3, colour = "white", fill = "skyblue4") + labs(y = "Frequency", x = "Mean") + geom_vline(xintercept = 1 / lambda)
ggsave(file="histogram1.png")
ggsave(file="histogram1.png", scale = 0.5)
ggsave(file="histogram1.png", scale = 0.25)
ggsave(file="histogram1.png")
ggsave(file="histogram1.png", height = 400px, width = 300px)
?ggsave
ggsave(file="histogram1.png")
ggsave(file="histogram1.png", width = 4.5, height = 5, units = cm)
ggsave(file="histogram1.png", width = 4.5, height = 5, units = "cm")
ggsave(file="histogram1.png")
ggsave(file="histogram1.png", scale = 0.75)
ggsave(file="histogram1.png")
mean(mns)
# Setting the value of lambda
lambda <- 0.2
# Obtaining the distribution of the averages of 40 exponentials
set.seed(123)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, lambda)))
# Plotting out a histogram of the distribution
library(ggplot2)
dB <- as.data.frame(mns)
ggplot(dB, aes(mns)) + geom_histogram(binwidth = 0.3, colour = "white", fill = "skyblue4") + labs(y = "Frequency", x = "Mean") + geom_vline(xintercept = 1 / lambda)
# Exporting as "histogram1.png"
ggsave(file="histogram1.png")
# Obtaining the sample mean
mean(mns)
1/lambda
